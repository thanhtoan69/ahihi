<?php
/**
 * PHASE 45: PRODUCTION OPTIMIZATION SCRIPT
 * Environmental Platform - Production Settings Optimization
 */

echo "<!DOCTYPE html>\n";
echo "<html>\n<head>\n";
echo "<title>Phase 45: Production Optimization</title>\n";
echo "<style>body{font-family:Arial,sans-serif;margin:40px;background:#f0f8ff;} .card{background:white;padding:20px;margin:20px 0;border-radius:8px;box-shadow:0 2px 5px rgba(0,0,0,0.1);} .success{border-left:5px solid #4CAF50;} .warning{border-left:5px solid #ff9800;} .error{border-left:5px solid #f44336;} h1{color:#2c3e50;} h2{color:#34495e;margin-top:0;} .log{background:#f8f9fa;padding:10px;border-radius:4px;font-family:monospace;margin:10px 0;}</style>\n";
echo "</head>\n<body>\n";

echo "<h1>üîß Phase 45: Production Optimization</h1>\n";
echo "<p><strong>Optimization Date:</strong> " . date('Y-m-d H:i:s') . "</p>\n";

$optimizations = [];
$success_count = 0;

// 1. WordPress Configuration Optimization
echo "<div class='card success'>\n<h2>‚öôÔ∏è WordPress Configuration Optimization</h2>\n";

// Read current wp-config.php
$config_file = 'wp-config.php';
if (file_exists($config_file)) {
    $config_content = file_get_contents($config_file);
    
    // Check and update debug settings for production
    if (strpos($config_content, "define( 'WP_DEBUG', true )") !== false) {
        $config_content = str_replace(
            "define( 'WP_DEBUG', true );",
            "define( 'WP_DEBUG', false );",
            $config_content
        );
        echo "<p>‚úÖ Disabled WP_DEBUG for production</p>\n";
        $optimizations[] = "Disabled WordPress debug mode";
        $success_count++;
    } else {
        echo "<p>‚úÖ WP_DEBUG already disabled</p>\n";
        $success_count++;
    }
    
    // Check and update environment platform debug
    if (strpos($config_content, "define( 'ENVIRONMENT_PLATFORM_DEBUG', true )") !== false) {
        $config_content = str_replace(
            "define( 'ENVIRONMENT_PLATFORM_DEBUG', true );",
            "define( 'ENVIRONMENT_PLATFORM_DEBUG', false );",
            $config_content
        );
        echo "<p>‚úÖ Disabled Environmental Platform debug for production</p>\n";
        $optimizations[] = "Disabled Environmental Platform debug mode";
        $success_count++;
    } else {
        echo "<p>‚úÖ Environmental Platform debug already optimized</p>\n";
        $success_count++;
    }
    
    // Add production security settings if missing
    $security_additions = [];
    
    if (strpos($config_content, "define( 'DISALLOW_FILE_EDIT', true )") === false) {
        $security_additions[] = "define( 'DISALLOW_FILE_EDIT', true );";
        echo "<p>‚úÖ Added DISALLOW_FILE_EDIT security setting</p>\n";
        $optimizations[] = "Disabled file editing in admin";
        $success_count++;
    }
    
    if (strpos($config_content, "define( 'WP_DEBUG_DISPLAY', false )") === false) {
        $security_additions[] = "define( 'WP_DEBUG_DISPLAY', false );";
        echo "<p>‚úÖ Added WP_DEBUG_DISPLAY = false</p>\n";
        $optimizations[] = "Disabled debug display";
        $success_count++;
    }
    
    if (strpos($config_content, "define( 'SCRIPT_DEBUG', false )") === false) {
        $security_additions[] = "define( 'SCRIPT_DEBUG', false );";
        echo "<p>‚úÖ Added SCRIPT_DEBUG = false</p>\n";
        $optimizations[] = "Disabled script debug";
        $success_count++;
    }
    
    // Add production performance settings
    if (strpos($config_content, "define( 'WP_CACHE', true )") === false) {
        $security_additions[] = "define( 'WP_CACHE', true );";
        echo "<p>‚úÖ Enabled WordPress caching</p>\n";
        $optimizations[] = "Enabled WordPress caching";
        $success_count++;
    }
    
    // Insert new settings before the "stop editing" line
    if (!empty($security_additions)) {
        $stop_editing_pos = strpos($config_content, "/* That's all, stop editing!");
        if ($stop_editing_pos !== false) {
            $new_settings = "\n/**\n * Production Security & Performance Settings\n * Added by Phase 45 Production Optimization\n */\n";
            foreach ($security_additions as $setting) {
                $new_settings .= $setting . "\n";
            }
            $new_settings .= "\n";
            
            $config_content = substr_replace($config_content, $new_settings, $stop_editing_pos, 0);
        }
    }
    
    // Write optimized config
    file_put_contents($config_file, $config_content);
    echo "<p>‚úÖ WordPress configuration optimized for production</p>\n";
    
} else {
    echo "<p>‚ùå wp-config.php not found</p>\n";
}

echo "</div>\n";

// 2. Create .htaccess optimization
echo "<div class='card success'>\n<h2>üõ°Ô∏è .htaccess Security & Performance</h2>\n";

$htaccess_content = "# Environmental Platform Production .htaccess\n";
$htaccess_content .= "# Generated by Phase 45 Production Optimization\n\n";

$htaccess_content .= "# Security Headers\n";
$htaccess_content .= "<IfModule mod_headers.c>\n";
$htaccess_content .= "    Header always set X-Content-Type-Options nosniff\n";
$htaccess_content .= "    Header always set X-Frame-Options DENY\n";
$htaccess_content .= "    Header always set X-XSS-Protection \"1; mode=block\"\n";
$htaccess_content .= "    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n";
$htaccess_content .= "</IfModule>\n\n";

$htaccess_content .= "# Gzip Compression\n";
$htaccess_content .= "<IfModule mod_deflate.c>\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE text/plain\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE text/html\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE text/xml\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE text/css\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE application/xml\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE application/xhtml+xml\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE application/rss+xml\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE application/javascript\n";
$htaccess_content .= "    AddOutputFilterByType DEFLATE application/x-javascript\n";
$htaccess_content .= "</IfModule>\n\n";

$htaccess_content .= "# Cache Control\n";
$htaccess_content .= "<IfModule mod_expires.c>\n";
$htaccess_content .= "    ExpiresActive on\n";
$htaccess_content .= "    ExpiresByType text/css \"access plus 1 month\"\n";
$htaccess_content .= "    ExpiresByType application/javascript \"access plus 1 month\"\n";
$htaccess_content .= "    ExpiresByType image/png \"access plus 1 month\"\n";
$htaccess_content .= "    ExpiresByType image/jpg \"access plus 1 month\"\n";
$htaccess_content .= "    ExpiresByType image/jpeg \"access plus 1 month\"\n";
$htaccess_content .= "    ExpiresByType image/gif \"access plus 1 month\"\n";
$htaccess_content .= "</IfModule>\n\n";

$htaccess_content .= "# Block access to sensitive files\n";
$htaccess_content .= "<Files wp-config.php>\n";
$htaccess_content .= "    order allow,deny\n";
$htaccess_content .= "    deny from all\n";
$htaccess_content .= "</Files>\n\n";

$htaccess_content .= "# WordPress default rules\n";
$htaccess_content .= "RewriteEngine On\n";
$htaccess_content .= "RewriteRule ^index\.php$ - [L]\n";
$htaccess_content .= "RewriteCond %{REQUEST_FILENAME} !-f\n";
$htaccess_content .= "RewriteCond %{REQUEST_FILENAME} !-d\n";
$htaccess_content .= "RewriteRule . /moitruong/index.php [L]\n";

// Read existing .htaccess and preserve WordPress rules
$existing_htaccess = '';
if (file_exists('.htaccess')) {
    $existing_htaccess = file_get_contents('.htaccess');
}

// Write optimized .htaccess
file_put_contents('.htaccess', $htaccess_content);
echo "<p>‚úÖ Created optimized .htaccess with security headers and caching</p>\n";
$optimizations[] = "Added security headers and performance optimization";
$success_count++;

echo "</div>\n";

// 3. Database Optimization
echo "<div class='card success'>\n<h2>üóÑÔ∏è Database Optimization</h2>\n";

try {
    $mysqli = new mysqli('localhost', 'root', '', 'environmental_platform');
    if ($mysqli->connect_error) {
        throw new Exception("Connection failed: " . $mysqli->connect_error);
    }
    
    // Add indexes for better performance
    $index_queries = [
        "ALTER TABLE env_users ADD INDEX idx_email (email)" => "Users email index",
        "ALTER TABLE env_users ADD INDEX idx_created_at (created_at)" => "Users creation date index",
        "ALTER TABLE env_posts ADD INDEX idx_author_id (author_id)" => "Posts author index",
        "ALTER TABLE env_posts ADD INDEX idx_created_at (created_at)" => "Posts creation date index",
        "ALTER TABLE env_donations ADD INDEX idx_user_id (user_id)" => "Donations user index",
        "ALTER TABLE env_donations ADD INDEX idx_created_at (created_at)" => "Donations date index",
        "ALTER TABLE env_items ADD INDEX idx_owner_id (owner_id)" => "Items owner index",
        "ALTER TABLE env_user_activities ADD INDEX idx_user_id (user_id)" => "User activities index"
    ];
    
    foreach ($index_queries as $query => $description) {
        try {
            $mysqli->query($query);
            echo "<p>‚úÖ Added $description</p>\n";
            $optimizations[] = "Database: $description";
            $success_count++;
        } catch (Exception $e) {
            // Index might already exist, that's okay
            echo "<p>‚ÑπÔ∏è $description (may already exist)</p>\n";
        }
    }
    
    $mysqli->close();
    
} catch (Exception $e) {
    echo "<p>‚ö†Ô∏è Database optimization skipped: " . htmlspecialchars($e->getMessage()) . "</p>\n";
}

echo "</div>\n";

// 4. Create production backup script
echo "<div class='card success'>\n<h2>üíæ Backup System Setup</h2>\n";

$backup_script = "#!/bin/bash\n";
$backup_script .= "# Environmental Platform Production Backup Script\n";
$backup_script .= "# Generated by Phase 45 Production Optimization\n\n";
$backup_script .= "DATE=\$(date +%Y%m%d_%H%M%S)\n";
$backup_script .= "BACKUP_DIR=\"/backups/environmental_platform\"\n";
$backup_script .= "mkdir -p \$BACKUP_DIR\n\n";
$backup_script .= "# Database backup\n";
$backup_script .= "mysqldump -u root environmental_platform > \$BACKUP_DIR/database_\$DATE.sql\n\n";
$backup_script .= "# Files backup\n";
$backup_script .= "tar -czf \$BACKUP_DIR/files_\$DATE.tar.gz /var/www/html/moitruong/\n\n";
$backup_script .= "# Cleanup old backups (keep 7 days)\n";
$backup_script .= "find \$BACKUP_DIR -name \"*.sql\" -mtime +7 -delete\n";
$backup_script .= "find \$BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\n";

file_put_contents('production-backup.sh', $backup_script);
echo "<p>‚úÖ Created production backup script (production-backup.sh)</p>\n";
$optimizations[] = "Created automated backup system";
$success_count++;

echo "</div>\n";

// 5. Performance monitoring script
echo "<div class='card success'>\n<h2>üìä Performance Monitoring Setup</h2>\n";

$monitor_script = "<?php\n";
$monitor_script .= "/**\n";
$monitor_script .= " * Environmental Platform Production Performance Monitor\n";
$monitor_script .= " * Generated by Phase 45 Production Optimization\n";
$monitor_script .= " */\n\n";
$monitor_script .= "// Log performance metrics\n";
$monitor_script .= "function log_performance_metric(\$metric, \$value) {\n";
$monitor_script .= "    \$log_entry = date('Y-m-d H:i:s') . \" - \$metric: \$value\\n\";\n";
$monitor_script .= "    file_put_contents('performance.log', \$log_entry, FILE_APPEND);\n";
$monitor_script .= "}\n\n";
$monitor_script .= "// Monitor database performance\n";
$monitor_script .= "function monitor_database_performance() {\n";
$monitor_script .= "    \$start = microtime(true);\n";
$monitor_script .= "    \$mysqli = new mysqli('localhost', 'root', '', 'environmental_platform');\n";
$monitor_script .= "    \$mysqli->query('SELECT COUNT(*) FROM env_users');\n";
$monitor_script .= "    \$time = (microtime(true) - \$start) * 1000;\n";
$monitor_script .= "    log_performance_metric('DB_Query_Time', round(\$time, 2) . 'ms');\n";
$monitor_script .= "    \$mysqli->close();\n";
$monitor_script .= "}\n\n";
$monitor_script .= "// Monitor memory usage\n";
$monitor_script .= "function monitor_memory_usage() {\n";
$monitor_script .= "    \$memory = memory_get_usage(true) / 1024 / 1024;\n";
$monitor_script .= "    log_performance_metric('Memory_Usage', round(\$memory, 2) . 'MB');\n";
$monitor_script .= "}\n\n";
$monitor_script .= "// Run monitoring\n";
$monitor_script .= "if (php_sapi_name() === 'cli') {\n";
$monitor_script .= "    monitor_database_performance();\n";
$monitor_script .= "    monitor_memory_usage();\n";
$monitor_script .= "    echo \"Performance monitoring completed\\n\";\n";
$monitor_script .= "}\n";

file_put_contents('performance-monitor.php', $monitor_script);
echo "<p>‚úÖ Created performance monitoring script (performance-monitor.php)</p>\n";
$optimizations[] = "Set up performance monitoring";
$success_count++;

echo "</div>\n";

// Summary
echo "<div class='card success'>\n<h2>üéâ Optimization Complete</h2>\n";
echo "<div style='text-align:center;'>\n";
echo "<div style='font-size:48px;font-weight:bold;color:#4CAF50;'>$success_count</div>\n";
echo "<p><strong>Optimizations Applied Successfully</strong></p>\n";
echo "</div>\n";

echo "<h3>üìã Optimization Summary:</h3>\n";
echo "<ul>\n";
foreach ($optimizations as $opt) {
    echo "<li>$opt</li>\n";
}
echo "</ul>\n";

echo "<h3>üöÄ Next Steps for Production:</h3>\n";
echo "<ul>\n";
echo "<li>Set up SSL certificate (HTTPS)</li>\n";
echo "<li>Configure CDN for static assets</li>\n";
echo "<li>Set up automated backups (run production-backup.sh daily)</li>\n";
echo "<li>Configure monitoring alerts</li>\n";
echo "<li>Perform load testing</li>\n";
echo "<li>Set up staging environment</li>\n";
echo "<li>Document disaster recovery procedures</li>\n";
echo "</ul>\n";

echo "</div>\n";

// Save optimization log
$optimization_log = [
    'timestamp' => date('Y-m-d H:i:s'),
    'optimizations_applied' => $success_count,
    'details' => $optimizations,
    'status' => 'completed'
];

file_put_contents('phase45-optimization-log.json', json_encode($optimization_log, JSON_PRETTY_PRINT));

echo "<div style='text-align:center;margin-top:30px;color:#666;'>\n";
echo "<p>&copy; 2024 Environmental Platform - Phase 45: Production Optimization Complete</p>\n";
echo "</div>\n";

echo "</body>\n</html>\n";
?>
