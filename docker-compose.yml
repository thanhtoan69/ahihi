version: '3.8'

services:
  # WordPress Application
  wordpress:
    image: wordpress:latest
    container_name: environmental_wordpress
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: environmental_platform
      WORDPRESS_TABLE_PREFIX: wp_
    volumes:
      - ./:/var/www/html
      - wordpress_data:/var/www/html/wp-content
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/ssl/certs
    depends_on:
      - db
      - redis
    networks:
      - environmental_network

  # MySQL Database
  db:
    image: mysql:8.0
    container_name: environmental_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: environmental_platform
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backups:/var/backups
      - ./docker/mysql.cnf:/etc/mysql/conf.d/custom.cnf
    ports:
      - "3306:3306"
    networks:
      - environmental_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: environmental_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - environmental_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: environmental_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx:/etc/nginx/conf.d
      - ./docker/ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - wordpress
    networks:
      - environmental_network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: environmental_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - environmental_network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: environmental_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - environmental_network

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: environmental_logstash
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/host
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - environmental_network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: environmental_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - environmental_network

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: environmental_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - environmental_network

  # Node Exporter for System Metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: environmental_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - environmental_network

  # MySQL Exporter for Database Metrics
  mysql_exporter:
    image: prom/mysqld-exporter
    container_name: environmental_mysql_exporter
    restart: unless-stopped
    ports:
      - "9104:9104"
    environment:
      DATA_SOURCE_NAME: "wordpress:${MYSQL_PASSWORD}@(db:3306)/environmental_platform"
    depends_on:
      - db
    networks:
      - environmental_network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: environmental_backup
    restart: "no"
    volumes:
      - ./:/app
      - ./backups:/backups
      - mysql_data:/var/lib/mysql:ro
    command: /app/scripts/backup.sh
    depends_on:
      - db
    networks:
      - environmental_network

volumes:
  wordpress_data:
  mysql_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  environmental_network:
    driver: bridge
